package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/zldobbs/ambrosia-server/db"
	"github.com/zldobbs/ambrosia-server/graph/model"
)

// CreateIngredient is the resolver for the createIngredient field.
func (r *mutationResolver) CreateIngredient(ctx context.Context, input model.NewIngredient) (*model.Ingredient, error) {
	// Create ingredient
	row := r.DB_POOL.QueryRow(
		ctx,
		`
		INSERT INTO ingredient (name, description, user_id)
		VALUES ($1, $2, $3)
		RETURNING ingredient_id::TEXT
		`,
		input.Name,
		input.Description,
		input.UserID,
	)

	var ingredient_id string
	err := row.Scan(&ingredient_id)
	if err != nil {
		return nil, fmt.Errorf("failed to create ingredient from %v, error: %v", input, err)
	}

	return db.GetIngredientById(r.DB_POOL, ingredient_id, ctx)
}

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, input model.NewRecipe) (*model.Recipe, error) {
	// First create the recipe
	row := r.DB_POOL.QueryRow(
		ctx,
		`
		INSERT INTO recipe (name, description, user_id)
		VALUES ($1, $2, $3)
		RETURNING recipe_id::TEXT
		`,
		input.Name,
		input.Description,
		input.UserID,
	)

	var recipe_id string
	err := row.Scan(&recipe_id)
	if err != nil {
		return nil, fmt.Errorf("could not grab the newly created recipe id: %v", err)
	}

	// Next add each ingredient as a relationship
	for _, existing_ingredient_id := range input.Ingredients {
		_, err = r.DB_POOL.Exec(
			ctx,
			`
			INSERT INTO recipe_ingredient (recipe_id, ingredient_id)
			VALUES ($1, $2)
			`,
			recipe_id,
			existing_ingredient_id.IngredientID,
		)
		if err != nil {
			return nil, fmt.Errorf("could not get the returned recipe_ingredient_id: %v", err)
		}
	}

	// Collect the entire recipe.
	return db.GetRecipeById(r.DB_POOL, recipe_id, ctx)
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	return db.GetRecipes(r.DB_POOL, ctx, nil)
}

// Ingredients is the resolver for the ingredients field.
func (r *queryResolver) Ingredients(ctx context.Context) ([]*model.Ingredient, error) {
	return db.GetIngredients(r.DB_POOL, ctx, nil)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
